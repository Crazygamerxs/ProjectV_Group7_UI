@page "/critical-notification-history"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using EmergencyServices.Group8;

<h2 style="display: inline-block;">Critical Notification History</h2>
<button class="btn-new-notification" @onclick="ShowAddNotificationModal" style="float: right; margin-left: 20px;">New
    Notification</button>

<!-- Filter Button with Icon -->
<button class="btn-filter-notifications" @onclick="ShowFilterOptions" style="float: right;">
    <i class="fas fa-filter"></i> Filter
</button>

<p class="notification-description">View a history of all notifications.</p>

@if (filteredNotifications == null)
{
    <p>
        <em>Loading ...</em>
    </p>
}
else
{
    <table>
    <thead>
        <tr>
            <th>Id</th>
            <th>Timestamp</th>
            <th>Source</th>
            <th>Disaster Type</th>
            <th>Description</th>
            <th>Priority</th>
            <th>Preparation Steps</th>
            <th>Active Steps</th>
            <th>Recovery Steps</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var notification in filteredNotifications)
        {
            <tr>
                <td>@notification.Id</td>
                <td>@notification.Timestamp.ToString("MMM d")</td>
                <td>@notification.Source</td>
                <td>@notification.DisasterType</td>
                <td>@notification.Description</td>
                <td>@notification.Priority</td>
                <td>@notification.PreparationSteps</td>
                <td>@notification.ActiveSteps</td>
                <td>@notification.RecoverySteps</td>
            </tr>
        }
    </tbody>
</table>

<AddNotificationModal @ref="addNotificationModal" OnClose="HandleModalClose" />
    <!-- Filter Modal -->
    <div class="filter-modal" style="display: @(isFilterVisible ? "block" : "none");">
        <div class="modal-content">
            <h4>Filter Notifications</h4>
            <input type="text" @bind="searchQuery" placeholder="Search....." />
            <div class="modal-actions">
                <button @onclick="ApplyFilter" class="btn-apply-filter">Apply Filter</button>
                <button @onclick="ClearFilter" class="btn-clear-filter">Clear Filter</button>
            </div>
        </div>
    </div>
}

@code {
    private string searchQuery = string.Empty;
    private List<ProcessedDisaster>? filteredNotifications;
    private AddNotificationModal addNotificationModal;
    private bool isFilterVisible = false;


    protected override async Task OnInitializedAsync()
    {
        filteredNotifications = await EmergencyBackend.GetAllProcessedDisastersAsync();
    }

    private void ShowAddNotificationModal()
    {
        addNotificationModal.Show();
    }

    private async Task HandleModalClose()
    {
        filteredNotifications = await EmergencyBackend.GetAllProcessedDisastersAsync();
    }

    private void ShowFilterOptions()
    {
        isFilterVisible = !isFilterVisible;
    }

    private async Task ApplyFilter()
    {
        if (string.IsNullOrEmpty(searchQuery))
        {
            filteredNotifications = await EmergencyBackend.GetAllProcessedDisastersAsync();
        }
        else 
        {
             string newQuery = searchQuery.ToUpper();
             switch (newQuery) // This was the original intended functionality of the project, as described in the documentation we made over a month ago
             {
                 case "WATCH":
                     filteredNotifications = await EmergencyBackend.GetDisastersByPriorityAsync(DisasterTypeEnums.Watch);
                     break;
                 case "WARNING":
                     filteredNotifications = await EmergencyBackend.GetDisastersByPriorityAsync(DisasterTypeEnums.Warning);
                     break;
                 case "URGENT":
                     filteredNotifications = await EmergencyBackend.GetDisastersByPriorityAsync(DisasterTypeEnums.Urgent);
                     break;
                 case "CRITICAL":
                     filteredNotifications = await EmergencyBackend.GetDisastersByPriorityAsync(DisasterTypeEnums.Critical);
                     break;
                 default:
                    filteredNotifications = filteredNotifications.Where(n => 
                    n.DisasterType.ToUpper().Contains(newQuery, StringComparison.OrdinalIgnoreCase) ||
                    n.Description.ToUpper().Contains(newQuery, StringComparison.OrdinalIgnoreCase) ||
                    n.Priority.ToUpper().Contains(newQuery, StringComparison.OrdinalIgnoreCase))
                    .ToList();
                     break;
             }
        }

        
    }

    private async void ClearFilter()
    {
        searchQuery = string.Empty;
        filteredNotifications = await EmergencyBackend.GetAllProcessedDisastersAsync();
    }
}
